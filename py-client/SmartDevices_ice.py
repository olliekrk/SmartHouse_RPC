# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `SmartDevices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Home
_M_Home = Ice.openModule('Home')
__name__ = 'Home'

if 'TemperatureUnit' not in _M_Home.__dict__:
    _M_Home.TemperatureUnit = Ice.createTempClass()
    class TemperatureUnit(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    TemperatureUnit.Fahrenheit = TemperatureUnit("Fahrenheit", 0)
    TemperatureUnit.Celsius = TemperatureUnit("Celsius", 1)
    TemperatureUnit._enumerators = { 0:TemperatureUnit.Fahrenheit, 1:TemperatureUnit.Celsius }

    _M_Home._t_TemperatureUnit = IcePy.defineEnum('::Home::TemperatureUnit', TemperatureUnit, (), TemperatureUnit._enumerators)

    _M_Home.TemperatureUnit = TemperatureUnit
    del TemperatureUnit

if 'Direction' not in _M_Home.__dict__:
    _M_Home.Direction = Ice.createTempClass()
    class Direction(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Direction.North = Direction("North", 0)
    Direction.West = Direction("West", 1)
    Direction.East = Direction("East", 2)
    Direction.South = Direction("South", 3)
    Direction._enumerators = { 0:Direction.North, 1:Direction.West, 2:Direction.East, 3:Direction.South }

    _M_Home._t_Direction = IcePy.defineEnum('::Home::Direction', Direction, (), Direction._enumerators)

    _M_Home.Direction = Direction
    del Direction

if 'HomeException' not in _M_Home.__dict__:
    _M_Home.HomeException = Ice.createTempClass()
    class HomeException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::HomeException'

    _M_Home._t_HomeException = IcePy.defineException('::Home::HomeException', HomeException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    HomeException._ice_type = _M_Home._t_HomeException

    _M_Home.HomeException = HomeException
    del HomeException

if 'InvalidQuantity' not in _M_Home.__dict__:
    _M_Home.InvalidQuantity = Ice.createTempClass()
    class InvalidQuantity(_M_Home.HomeException):
        def __init__(self, reason=''):
            _M_Home.HomeException.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::InvalidQuantity'

    _M_Home._t_InvalidQuantity = IcePy.defineException('::Home::InvalidQuantity', InvalidQuantity, (), False, _M_Home._t_HomeException, ())
    InvalidQuantity._ice_type = _M_Home._t_InvalidQuantity

    _M_Home.InvalidQuantity = InvalidQuantity
    del InvalidQuantity

if 'InvalidCoordinates' not in _M_Home.__dict__:
    _M_Home.InvalidCoordinates = Ice.createTempClass()
    class InvalidCoordinates(_M_Home.HomeException):
        def __init__(self, reason=''):
            _M_Home.HomeException.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::InvalidCoordinates'

    _M_Home._t_InvalidCoordinates = IcePy.defineException('::Home::InvalidCoordinates', InvalidCoordinates, (), False, _M_Home._t_HomeException, ())
    InvalidCoordinates._ice_type = _M_Home._t_InvalidCoordinates

    _M_Home.InvalidCoordinates = InvalidCoordinates
    del InvalidCoordinates

if 'InvalidTemperature' not in _M_Home.__dict__:
    _M_Home.InvalidTemperature = Ice.createTempClass()
    class InvalidTemperature(_M_Home.HomeException):
        def __init__(self, reason='', maxValue=0.0, minValue=0.0):
            _M_Home.HomeException.__init__(self, reason)
            self.maxValue = maxValue
            self.minValue = minValue

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::InvalidTemperature'

    _M_Home._t_InvalidTemperature = IcePy.defineException('::Home::InvalidTemperature', InvalidTemperature, (), False, _M_Home._t_HomeException, (
        ('maxValue', (), IcePy._t_double, False, 0),
        ('minValue', (), IcePy._t_double, False, 0)
    ))
    InvalidTemperature._ice_type = _M_Home._t_InvalidTemperature

    _M_Home.InvalidTemperature = InvalidTemperature
    del InvalidTemperature

# Start of module Home.Garden
_M_Home.Garden = Ice.openModule('Home.Garden')
__name__ = 'Home.Garden'

if 'Coordinates' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.Coordinates = Ice.createTempClass()
    class Coordinates(object):
        def __init__(self, latitude=0.0, longitude=0.0):
            self.latitude = latitude
            self.longitude = longitude

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Home.Garden.Coordinates):
                return NotImplemented
            else:
                if self.latitude != other.latitude:
                    return False
                if self.longitude != other.longitude:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_Coordinates)

        __repr__ = __str__

    _M_Home.Garden._t_Coordinates = IcePy.defineStruct('::Home::Garden::Coordinates', Coordinates, (), (
        ('latitude', (), IcePy._t_double),
        ('longitude', (), IcePy._t_double)
    ))

    _M_Home.Garden.Coordinates = Coordinates
    del Coordinates

if 'GrassMower' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.GrassMower = Ice.createTempClass()
    class GrassMower(Ice.Value):
        def __init__(self, coordinates=Ice._struct_marker, isOn=False):
            if coordinates is Ice._struct_marker:
                self.coordinates = _M_Home.Garden.Coordinates()
            else:
                self.coordinates = coordinates
            self.isOn = isOn

        def ice_id(self):
            return '::Home::Garden::GrassMower'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::GrassMower'

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_GrassMower)

        __repr__ = __str__

    _M_Home.Garden._t_GrassMower = IcePy.defineValue('::Home::Garden::GrassMower', GrassMower, -1, (), False, False, None, (
        ('coordinates', (), _M_Home.Garden._t_Coordinates, False, 0),
        ('isOn', (), IcePy._t_bool, False, 0)
    ))
    GrassMower._ice_type = _M_Home.Garden._t_GrassMower

    _M_Home.Garden.GrassMower = GrassMower
    del GrassMower

_M_Home.Garden._t_Localizable = IcePy.defineValue('::Home::Garden::Localizable', Ice.Value, -1, (), False, True, None, ())

if 'LocalizablePrx' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.LocalizablePrx = Ice.createTempClass()
    class LocalizablePrx(Ice.ObjectPrx):

        def getCoordinates(self, context=None):
            return _M_Home.Garden.Localizable._op_getCoordinates.invoke(self, ((), context))

        def getCoordinatesAsync(self, context=None):
            return _M_Home.Garden.Localizable._op_getCoordinates.invokeAsync(self, ((), context))

        def begin_getCoordinates(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.Localizable._op_getCoordinates.begin(self, ((), _response, _ex, _sent, context))

        def end_getCoordinates(self, _r):
            return _M_Home.Garden.Localizable._op_getCoordinates.end(self, _r)

        def setCoordinates(self, coordinates, context=None):
            return _M_Home.Garden.Localizable._op_setCoordinates.invoke(self, ((coordinates, ), context))

        def setCoordinatesAsync(self, coordinates, context=None):
            return _M_Home.Garden.Localizable._op_setCoordinates.invokeAsync(self, ((coordinates, ), context))

        def begin_setCoordinates(self, coordinates, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.Localizable._op_setCoordinates.begin(self, ((coordinates, ), _response, _ex, _sent, context))

        def end_setCoordinates(self, _r):
            return _M_Home.Garden.Localizable._op_setCoordinates.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.Garden.LocalizablePrx.ice_checkedCast(proxy, '::Home::Garden::Localizable', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.Garden.LocalizablePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::Localizable'
    _M_Home.Garden._t_LocalizablePrx = IcePy.defineProxy('::Home::Garden::Localizable', LocalizablePrx)

    _M_Home.Garden.LocalizablePrx = LocalizablePrx
    del LocalizablePrx

    _M_Home.Garden.Localizable = Ice.createTempClass()
    class Localizable(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Garden::Localizable', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Garden::Localizable'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::Localizable'

        def getCoordinates(self, current=None):
            raise NotImplementedError("servant method 'getCoordinates' not implemented")

        def setCoordinates(self, coordinates, current=None):
            raise NotImplementedError("servant method 'setCoordinates' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_LocalizableDisp)

        __repr__ = __str__

    _M_Home.Garden._t_LocalizableDisp = IcePy.defineClass('::Home::Garden::Localizable', Localizable, (), None, ())
    Localizable._ice_type = _M_Home.Garden._t_LocalizableDisp

    Localizable._op_getCoordinates = IcePy.Operation('getCoordinates', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home.Garden._t_Coordinates, False, 0), ())
    Localizable._op_setCoordinates = IcePy.Operation('setCoordinates', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home.Garden._t_Coordinates, False, 0),), (), None, (_M_Home._t_InvalidCoordinates,))

    _M_Home.Garden.Localizable = Localizable
    del Localizable

_M_Home.Garden._t_GrassMowerController = IcePy.defineValue('::Home::Garden::GrassMowerController', Ice.Value, -1, (), False, True, None, ())

if 'GrassMowerControllerPrx' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.GrassMowerControllerPrx = Ice.createTempClass()
    class GrassMowerControllerPrx(_M_Home.Garden.LocalizablePrx):

        def turnSwitch(self, isOn, context=None):
            return _M_Home.Garden.GrassMowerController._op_turnSwitch.invoke(self, ((isOn, ), context))

        def turnSwitchAsync(self, isOn, context=None):
            return _M_Home.Garden.GrassMowerController._op_turnSwitch.invokeAsync(self, ((isOn, ), context))

        def begin_turnSwitch(self, isOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.GrassMowerController._op_turnSwitch.begin(self, ((isOn, ), _response, _ex, _sent, context))

        def end_turnSwitch(self, _r):
            return _M_Home.Garden.GrassMowerController._op_turnSwitch.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.Garden.GrassMowerControllerPrx.ice_checkedCast(proxy, '::Home::Garden::GrassMowerController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.Garden.GrassMowerControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::GrassMowerController'
    _M_Home.Garden._t_GrassMowerControllerPrx = IcePy.defineProxy('::Home::Garden::GrassMowerController', GrassMowerControllerPrx)

    _M_Home.Garden.GrassMowerControllerPrx = GrassMowerControllerPrx
    del GrassMowerControllerPrx

    _M_Home.Garden.GrassMowerController = Ice.createTempClass()
    class GrassMowerController(_M_Home.Garden.Localizable):

        def ice_ids(self, current=None):
            return ('::Home::Garden::GrassMowerController', '::Home::Garden::Localizable', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Garden::GrassMowerController'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::GrassMowerController'

        def turnSwitch(self, isOn, current=None):
            raise NotImplementedError("servant method 'turnSwitch' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_GrassMowerControllerDisp)

        __repr__ = __str__

    _M_Home.Garden._t_GrassMowerControllerDisp = IcePy.defineClass('::Home::Garden::GrassMowerController', GrassMowerController, (), None, (_M_Home.Garden._t_LocalizableDisp,))
    GrassMowerController._ice_type = _M_Home.Garden._t_GrassMowerControllerDisp

    GrassMowerController._op_turnSwitch = IcePy.Operation('turnSwitch', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_Home.Garden.GrassMowerController = GrassMowerController
    del GrassMowerController

if 'Camera' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.Camera = Ice.createTempClass()
    class Camera(Ice.Value):
        def __init__(self, coordinates=Ice._struct_marker, direction=_M_Home.Direction.North, zoom=0):
            if coordinates is Ice._struct_marker:
                self.coordinates = _M_Home.Garden.Coordinates()
            else:
                self.coordinates = coordinates
            self.direction = direction
            self.zoom = zoom

        def ice_id(self):
            return '::Home::Garden::Camera'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::Camera'

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_Camera)

        __repr__ = __str__

    _M_Home.Garden._t_Camera = IcePy.defineValue('::Home::Garden::Camera', Camera, -1, (), False, False, None, (
        ('coordinates', (), _M_Home.Garden._t_Coordinates, False, 0),
        ('direction', (), _M_Home._t_Direction, False, 0),
        ('zoom', (), IcePy._t_long, False, 0)
    ))
    Camera._ice_type = _M_Home.Garden._t_Camera

    _M_Home.Garden.Camera = Camera
    del Camera

if 'WallCamera' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.WallCamera = Ice.createTempClass()
    class WallCamera(_M_Home.Garden.Camera):
        def __init__(self, coordinates=Ice._struct_marker, direction=_M_Home.Direction.North, zoom=0, visible=False):
            _M_Home.Garden.Camera.__init__(self, coordinates, direction, zoom)
            self.visible = visible

        def ice_id(self):
            return '::Home::Garden::WallCamera'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::WallCamera'

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_WallCamera)

        __repr__ = __str__

    _M_Home.Garden._t_WallCamera = IcePy.defineValue('::Home::Garden::WallCamera', WallCamera, -1, (), False, False, _M_Home.Garden._t_Camera, (('visible', (), IcePy._t_bool, False, 0),))
    WallCamera._ice_type = _M_Home.Garden._t_WallCamera

    _M_Home.Garden.WallCamera = WallCamera
    del WallCamera

if 'DroneCamera' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.DroneCamera = Ice.createTempClass()
    class DroneCamera(_M_Home.Garden.Camera):
        def __init__(self, coordinates=Ice._struct_marker, direction=_M_Home.Direction.North, zoom=0, altitude=0.0):
            _M_Home.Garden.Camera.__init__(self, coordinates, direction, zoom)
            self.altitude = altitude

        def ice_id(self):
            return '::Home::Garden::DroneCamera'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::DroneCamera'

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_DroneCamera)

        __repr__ = __str__

    _M_Home.Garden._t_DroneCamera = IcePy.defineValue('::Home::Garden::DroneCamera', DroneCamera, -1, (), False, False, _M_Home.Garden._t_Camera, (('altitude', (), IcePy._t_double, False, 0),))
    DroneCamera._ice_type = _M_Home.Garden._t_DroneCamera

    _M_Home.Garden.DroneCamera = DroneCamera
    del DroneCamera

_M_Home.Garden._t_CameraController = IcePy.defineValue('::Home::Garden::CameraController', Ice.Value, -1, (), False, True, None, ())

if 'CameraControllerPrx' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.CameraControllerPrx = Ice.createTempClass()
    class CameraControllerPrx(_M_Home.Garden.LocalizablePrx):

        def getDirection(self, context=None):
            return _M_Home.Garden.CameraController._op_getDirection.invoke(self, ((), context))

        def getDirectionAsync(self, context=None):
            return _M_Home.Garden.CameraController._op_getDirection.invokeAsync(self, ((), context))

        def begin_getDirection(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.CameraController._op_getDirection.begin(self, ((), _response, _ex, _sent, context))

        def end_getDirection(self, _r):
            return _M_Home.Garden.CameraController._op_getDirection.end(self, _r)

        def getZoom(self, context=None):
            return _M_Home.Garden.CameraController._op_getZoom.invoke(self, ((), context))

        def getZoomAsync(self, context=None):
            return _M_Home.Garden.CameraController._op_getZoom.invokeAsync(self, ((), context))

        def begin_getZoom(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.CameraController._op_getZoom.begin(self, ((), _response, _ex, _sent, context))

        def end_getZoom(self, _r):
            return _M_Home.Garden.CameraController._op_getZoom.end(self, _r)

        def setDirection(self, direction, context=None):
            return _M_Home.Garden.CameraController._op_setDirection.invoke(self, ((direction, ), context))

        def setDirectionAsync(self, direction, context=None):
            return _M_Home.Garden.CameraController._op_setDirection.invokeAsync(self, ((direction, ), context))

        def begin_setDirection(self, direction, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.CameraController._op_setDirection.begin(self, ((direction, ), _response, _ex, _sent, context))

        def end_setDirection(self, _r):
            return _M_Home.Garden.CameraController._op_setDirection.end(self, _r)

        def zoomIn(self, zoomBy, context=None):
            return _M_Home.Garden.CameraController._op_zoomIn.invoke(self, ((zoomBy, ), context))

        def zoomInAsync(self, zoomBy, context=None):
            return _M_Home.Garden.CameraController._op_zoomIn.invokeAsync(self, ((zoomBy, ), context))

        def begin_zoomIn(self, zoomBy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.CameraController._op_zoomIn.begin(self, ((zoomBy, ), _response, _ex, _sent, context))

        def end_zoomIn(self, _r):
            return _M_Home.Garden.CameraController._op_zoomIn.end(self, _r)

        def zoomOut(self, zoomBy, context=None):
            return _M_Home.Garden.CameraController._op_zoomOut.invoke(self, ((zoomBy, ), context))

        def zoomOutAsync(self, zoomBy, context=None):
            return _M_Home.Garden.CameraController._op_zoomOut.invokeAsync(self, ((zoomBy, ), context))

        def begin_zoomOut(self, zoomBy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.CameraController._op_zoomOut.begin(self, ((zoomBy, ), _response, _ex, _sent, context))

        def end_zoomOut(self, _r):
            return _M_Home.Garden.CameraController._op_zoomOut.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.Garden.CameraControllerPrx.ice_checkedCast(proxy, '::Home::Garden::CameraController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.Garden.CameraControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::CameraController'
    _M_Home.Garden._t_CameraControllerPrx = IcePy.defineProxy('::Home::Garden::CameraController', CameraControllerPrx)

    _M_Home.Garden.CameraControllerPrx = CameraControllerPrx
    del CameraControllerPrx

    _M_Home.Garden.CameraController = Ice.createTempClass()
    class CameraController(_M_Home.Garden.Localizable):

        def ice_ids(self, current=None):
            return ('::Home::Garden::CameraController', '::Home::Garden::Localizable', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Garden::CameraController'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::CameraController'

        def getDirection(self, current=None):
            raise NotImplementedError("servant method 'getDirection' not implemented")

        def getZoom(self, current=None):
            raise NotImplementedError("servant method 'getZoom' not implemented")

        def setDirection(self, direction, current=None):
            raise NotImplementedError("servant method 'setDirection' not implemented")

        def zoomIn(self, zoomBy, current=None):
            raise NotImplementedError("servant method 'zoomIn' not implemented")

        def zoomOut(self, zoomBy, current=None):
            raise NotImplementedError("servant method 'zoomOut' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_CameraControllerDisp)

        __repr__ = __str__

    _M_Home.Garden._t_CameraControllerDisp = IcePy.defineClass('::Home::Garden::CameraController', CameraController, (), None, (_M_Home.Garden._t_LocalizableDisp,))
    CameraController._ice_type = _M_Home.Garden._t_CameraControllerDisp

    CameraController._op_getDirection = IcePy.Operation('getDirection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_Direction, False, 0), ())
    CameraController._op_getZoom = IcePy.Operation('getZoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())
    CameraController._op_setDirection = IcePy.Operation('setDirection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_Direction, False, 0),), (), None, ())
    CameraController._op_zoomIn = IcePy.Operation('zoomIn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), None, ())
    CameraController._op_zoomOut = IcePy.Operation('zoomOut', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), None, ())

    _M_Home.Garden.CameraController = CameraController
    del CameraController

_M_Home.Garden._t_WallCameraController = IcePy.defineValue('::Home::Garden::WallCameraController', Ice.Value, -1, (), False, True, None, ())

if 'WallCameraControllerPrx' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.WallCameraControllerPrx = Ice.createTempClass()
    class WallCameraControllerPrx(_M_Home.Garden.CameraControllerPrx):

        def isVisible(self, context=None):
            return _M_Home.Garden.WallCameraController._op_isVisible.invoke(self, ((), context))

        def isVisibleAsync(self, context=None):
            return _M_Home.Garden.WallCameraController._op_isVisible.invokeAsync(self, ((), context))

        def begin_isVisible(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.WallCameraController._op_isVisible.begin(self, ((), _response, _ex, _sent, context))

        def end_isVisible(self, _r):
            return _M_Home.Garden.WallCameraController._op_isVisible.end(self, _r)

        def setVisibility(self, visible, context=None):
            return _M_Home.Garden.WallCameraController._op_setVisibility.invoke(self, ((visible, ), context))

        def setVisibilityAsync(self, visible, context=None):
            return _M_Home.Garden.WallCameraController._op_setVisibility.invokeAsync(self, ((visible, ), context))

        def begin_setVisibility(self, visible, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.WallCameraController._op_setVisibility.begin(self, ((visible, ), _response, _ex, _sent, context))

        def end_setVisibility(self, _r):
            return _M_Home.Garden.WallCameraController._op_setVisibility.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.Garden.WallCameraControllerPrx.ice_checkedCast(proxy, '::Home::Garden::WallCameraController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.Garden.WallCameraControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::WallCameraController'
    _M_Home.Garden._t_WallCameraControllerPrx = IcePy.defineProxy('::Home::Garden::WallCameraController', WallCameraControllerPrx)

    _M_Home.Garden.WallCameraControllerPrx = WallCameraControllerPrx
    del WallCameraControllerPrx

    _M_Home.Garden.WallCameraController = Ice.createTempClass()
    class WallCameraController(_M_Home.Garden.CameraController):

        def ice_ids(self, current=None):
            return ('::Home::Garden::CameraController', '::Home::Garden::Localizable', '::Home::Garden::WallCameraController', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Garden::WallCameraController'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::WallCameraController'

        def isVisible(self, current=None):
            raise NotImplementedError("servant method 'isVisible' not implemented")

        def setVisibility(self, visible, current=None):
            raise NotImplementedError("servant method 'setVisibility' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_WallCameraControllerDisp)

        __repr__ = __str__

    _M_Home.Garden._t_WallCameraControllerDisp = IcePy.defineClass('::Home::Garden::WallCameraController', WallCameraController, (), None, (_M_Home.Garden._t_CameraControllerDisp,))
    WallCameraController._ice_type = _M_Home.Garden._t_WallCameraControllerDisp

    WallCameraController._op_isVisible = IcePy.Operation('isVisible', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    WallCameraController._op_setVisibility = IcePy.Operation('setVisibility', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_Home.Garden.WallCameraController = WallCameraController
    del WallCameraController

_M_Home.Garden._t_DroneCameraController = IcePy.defineValue('::Home::Garden::DroneCameraController', Ice.Value, -1, (), False, True, None, ())

if 'DroneCameraControllerPrx' not in _M_Home.Garden.__dict__:
    _M_Home.Garden.DroneCameraControllerPrx = Ice.createTempClass()
    class DroneCameraControllerPrx(_M_Home.Garden.CameraControllerPrx):

        def getAltitude(self, context=None):
            return _M_Home.Garden.DroneCameraController._op_getAltitude.invoke(self, ((), context))

        def getAltitudeAsync(self, context=None):
            return _M_Home.Garden.DroneCameraController._op_getAltitude.invokeAsync(self, ((), context))

        def begin_getAltitude(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.DroneCameraController._op_getAltitude.begin(self, ((), _response, _ex, _sent, context))

        def end_getAltitude(self, _r):
            return _M_Home.Garden.DroneCameraController._op_getAltitude.end(self, _r)

        def setAltitude(self, altitude, context=None):
            return _M_Home.Garden.DroneCameraController._op_setAltitude.invoke(self, ((altitude, ), context))

        def setAltitudeAsync(self, altitude, context=None):
            return _M_Home.Garden.DroneCameraController._op_setAltitude.invokeAsync(self, ((altitude, ), context))

        def begin_setAltitude(self, altitude, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Garden.DroneCameraController._op_setAltitude.begin(self, ((altitude, ), _response, _ex, _sent, context))

        def end_setAltitude(self, _r):
            return _M_Home.Garden.DroneCameraController._op_setAltitude.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.Garden.DroneCameraControllerPrx.ice_checkedCast(proxy, '::Home::Garden::DroneCameraController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.Garden.DroneCameraControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::DroneCameraController'
    _M_Home.Garden._t_DroneCameraControllerPrx = IcePy.defineProxy('::Home::Garden::DroneCameraController', DroneCameraControllerPrx)

    _M_Home.Garden.DroneCameraControllerPrx = DroneCameraControllerPrx
    del DroneCameraControllerPrx

    _M_Home.Garden.DroneCameraController = Ice.createTempClass()
    class DroneCameraController(_M_Home.Garden.CameraController):

        def ice_ids(self, current=None):
            return ('::Home::Garden::CameraController', '::Home::Garden::DroneCameraController', '::Home::Garden::Localizable', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Garden::DroneCameraController'

        @staticmethod
        def ice_staticId():
            return '::Home::Garden::DroneCameraController'

        def getAltitude(self, current=None):
            raise NotImplementedError("servant method 'getAltitude' not implemented")

        def setAltitude(self, altitude, current=None):
            raise NotImplementedError("servant method 'setAltitude' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Garden._t_DroneCameraControllerDisp)

        __repr__ = __str__

    _M_Home.Garden._t_DroneCameraControllerDisp = IcePy.defineClass('::Home::Garden::DroneCameraController', DroneCameraController, (), None, (_M_Home.Garden._t_CameraControllerDisp,))
    DroneCameraController._ice_type = _M_Home.Garden._t_DroneCameraControllerDisp

    DroneCameraController._op_getAltitude = IcePy.Operation('getAltitude', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    DroneCameraController._op_setAltitude = IcePy.Operation('setAltitude', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, (_M_Home._t_InvalidCoordinates,))

    _M_Home.Garden.DroneCameraController = DroneCameraController
    del DroneCameraController

# End of module Home.Garden

__name__ = 'Home'

# Start of module Home.Kitchen
_M_Home.Kitchen = Ice.openModule('Home.Kitchen')
__name__ = 'Home.Kitchen'

if 'Item' not in _M_Home.Kitchen.__dict__:
    _M_Home.Kitchen.Item = Ice.createTempClass()
    class Item(object):
        def __init__(self, name=''):
            self.name = name

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Home.Kitchen.Item):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Kitchen._t_Item)

        __repr__ = __str__

    _M_Home.Kitchen._t_Item = IcePy.defineStruct('::Home::Kitchen::Item', Item, (), (('name', (), IcePy._t_string),))

    _M_Home.Kitchen.Item = Item
    del Item

if 'Temperature' not in _M_Home.Kitchen.__dict__:
    _M_Home.Kitchen.Temperature = Ice.createTempClass()
    class Temperature(object):
        def __init__(self, unit=_M_Home.TemperatureUnit.Fahrenheit, value=0.0):
            self.unit = unit
            self.value = value

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Home.Kitchen.Temperature):
                return NotImplemented
            else:
                if self.unit != other.unit:
                    return False
                if self.value != other.value:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Kitchen._t_Temperature)

        __repr__ = __str__

    _M_Home.Kitchen._t_Temperature = IcePy.defineStruct('::Home::Kitchen::Temperature', Temperature, (), (
        ('unit', (), _M_Home._t_TemperatureUnit),
        ('value', (), IcePy._t_double)
    ))

    _M_Home.Kitchen.Temperature = Temperature
    del Temperature

if '_t_ItemBag' not in _M_Home.Kitchen.__dict__:
    _M_Home.Kitchen._t_ItemBag = IcePy.defineDictionary('::Home::Kitchen::ItemBag', (), _M_Home.Kitchen._t_Item, IcePy._t_long)

if 'Fridge' not in _M_Home.Kitchen.__dict__:
    _M_Home.Kitchen.Fridge = Ice.createTempClass()
    class Fridge(Ice.Value):
        def __init__(self, items=None, temperature=Ice._struct_marker, messageOfTheDay='', ecoMode=False):
            self.items = items
            if temperature is Ice._struct_marker:
                self.temperature = _M_Home.Kitchen.Temperature()
            else:
                self.temperature = temperature
            self.messageOfTheDay = messageOfTheDay
            self.ecoMode = ecoMode

        def ice_id(self):
            return '::Home::Kitchen::Fridge'

        @staticmethod
        def ice_staticId():
            return '::Home::Kitchen::Fridge'

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Kitchen._t_Fridge)

        __repr__ = __str__

    _M_Home.Kitchen._t_Fridge = IcePy.defineValue('::Home::Kitchen::Fridge', Fridge, -1, (), False, False, None, (
        ('items', (), _M_Home.Kitchen._t_ItemBag, False, 0),
        ('temperature', (), _M_Home.Kitchen._t_Temperature, False, 0),
        ('messageOfTheDay', (), IcePy._t_string, False, 0),
        ('ecoMode', (), IcePy._t_bool, False, 0)
    ))
    Fridge._ice_type = _M_Home.Kitchen._t_Fridge

    _M_Home.Kitchen.Fridge = Fridge
    del Fridge

_M_Home.Kitchen._t_FridgeController = IcePy.defineValue('::Home::Kitchen::FridgeController', Ice.Value, -1, (), False, True, None, ())

if 'FridgeControllerPrx' not in _M_Home.Kitchen.__dict__:
    _M_Home.Kitchen.FridgeControllerPrx = Ice.createTempClass()
    class FridgeControllerPrx(Ice.ObjectPrx):

        def getTemperature(self, unit, context=None):
            return _M_Home.Kitchen.FridgeController._op_getTemperature.invoke(self, ((unit, ), context))

        def getTemperatureAsync(self, unit, context=None):
            return _M_Home.Kitchen.FridgeController._op_getTemperature.invokeAsync(self, ((unit, ), context))

        def begin_getTemperature(self, unit, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_getTemperature.begin(self, ((unit, ), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_Home.Kitchen.FridgeController._op_getTemperature.end(self, _r)

        def getMessageOfTheDay(self, context=None):
            return _M_Home.Kitchen.FridgeController._op_getMessageOfTheDay.invoke(self, ((), context))

        def getMessageOfTheDayAsync(self, context=None):
            return _M_Home.Kitchen.FridgeController._op_getMessageOfTheDay.invokeAsync(self, ((), context))

        def begin_getMessageOfTheDay(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_getMessageOfTheDay.begin(self, ((), _response, _ex, _sent, context))

        def end_getMessageOfTheDay(self, _r):
            return _M_Home.Kitchen.FridgeController._op_getMessageOfTheDay.end(self, _r)

        def getItems(self, context=None):
            return _M_Home.Kitchen.FridgeController._op_getItems.invoke(self, ((), context))

        def getItemsAsync(self, context=None):
            return _M_Home.Kitchen.FridgeController._op_getItems.invokeAsync(self, ((), context))

        def begin_getItems(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_getItems.begin(self, ((), _response, _ex, _sent, context))

        def end_getItems(self, _r):
            return _M_Home.Kitchen.FridgeController._op_getItems.end(self, _r)

        def setEcoMode(self, ecoMode, context=None):
            return _M_Home.Kitchen.FridgeController._op_setEcoMode.invoke(self, ((ecoMode, ), context))

        def setEcoModeAsync(self, ecoMode, context=None):
            return _M_Home.Kitchen.FridgeController._op_setEcoMode.invokeAsync(self, ((ecoMode, ), context))

        def begin_setEcoMode(self, ecoMode, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_setEcoMode.begin(self, ((ecoMode, ), _response, _ex, _sent, context))

        def end_setEcoMode(self, _r):
            return _M_Home.Kitchen.FridgeController._op_setEcoMode.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_Home.Kitchen.FridgeController._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_Home.Kitchen.FridgeController._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Home.Kitchen.FridgeController._op_setTemperature.end(self, _r)

        def putItems(self, item, quantity, context=None):
            return _M_Home.Kitchen.FridgeController._op_putItems.invoke(self, ((item, quantity), context))

        def putItemsAsync(self, item, quantity, context=None):
            return _M_Home.Kitchen.FridgeController._op_putItems.invokeAsync(self, ((item, quantity), context))

        def begin_putItems(self, item, quantity, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_putItems.begin(self, ((item, quantity), _response, _ex, _sent, context))

        def end_putItems(self, _r):
            return _M_Home.Kitchen.FridgeController._op_putItems.end(self, _r)

        def removeItems(self, item, quantity, context=None):
            return _M_Home.Kitchen.FridgeController._op_removeItems.invoke(self, ((item, quantity), context))

        def removeItemsAsync(self, item, quantity, context=None):
            return _M_Home.Kitchen.FridgeController._op_removeItems.invokeAsync(self, ((item, quantity), context))

        def begin_removeItems(self, item, quantity, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Kitchen.FridgeController._op_removeItems.begin(self, ((item, quantity), _response, _ex, _sent, context))

        def end_removeItems(self, _r):
            return _M_Home.Kitchen.FridgeController._op_removeItems.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.Kitchen.FridgeControllerPrx.ice_checkedCast(proxy, '::Home::Kitchen::FridgeController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.Kitchen.FridgeControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Kitchen::FridgeController'
    _M_Home.Kitchen._t_FridgeControllerPrx = IcePy.defineProxy('::Home::Kitchen::FridgeController', FridgeControllerPrx)

    _M_Home.Kitchen.FridgeControllerPrx = FridgeControllerPrx
    del FridgeControllerPrx

    _M_Home.Kitchen.FridgeController = Ice.createTempClass()
    class FridgeController(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Kitchen::FridgeController', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Kitchen::FridgeController'

        @staticmethod
        def ice_staticId():
            return '::Home::Kitchen::FridgeController'

        def getTemperature(self, unit, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def getMessageOfTheDay(self, current=None):
            raise NotImplementedError("servant method 'getMessageOfTheDay' not implemented")

        def getItems(self, current=None):
            raise NotImplementedError("servant method 'getItems' not implemented")

        def setEcoMode(self, ecoMode, current=None):
            raise NotImplementedError("servant method 'setEcoMode' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def putItems(self, item, quantity, current=None):
            raise NotImplementedError("servant method 'putItems' not implemented")

        def removeItems(self, item, quantity, current=None):
            raise NotImplementedError("servant method 'removeItems' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home.Kitchen._t_FridgeControllerDisp)

        __repr__ = __str__

    _M_Home.Kitchen._t_FridgeControllerDisp = IcePy.defineClass('::Home::Kitchen::FridgeController', FridgeController, (), None, ())
    FridgeController._ice_type = _M_Home.Kitchen._t_FridgeControllerDisp

    FridgeController._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home._t_TemperatureUnit, False, 0),), (), ((), _M_Home.Kitchen._t_Temperature, False, 0), ())
    FridgeController._op_getMessageOfTheDay = IcePy.Operation('getMessageOfTheDay', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    FridgeController._op_getItems = IcePy.Operation('getItems', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home.Kitchen._t_ItemBag, False, 0), ())
    FridgeController._op_setEcoMode = IcePy.Operation('setEcoMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    FridgeController._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home.Kitchen._t_Temperature, False, 0),), (), None, (_M_Home._t_InvalidTemperature,))
    FridgeController._op_putItems = IcePy.Operation('putItems', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home.Kitchen._t_Item, False, 0), ((), IcePy._t_long, False, 0)), (), None, (_M_Home._t_InvalidQuantity,))
    FridgeController._op_removeItems = IcePy.Operation('removeItems', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Home.Kitchen._t_Item, False, 0), ((), IcePy._t_long, False, 0)), (), None, (_M_Home._t_InvalidQuantity,))

    _M_Home.Kitchen.FridgeController = FridgeController
    del FridgeController

# End of module Home.Kitchen

__name__ = 'Home'

if '_t_ObjectIdentities' not in _M_Home.__dict__:
    _M_Home._t_ObjectIdentities = IcePy.defineSequence('::Home::ObjectIdentities', (), IcePy._t_string)

_M_Home._t_HomeStatus = IcePy.defineValue('::Home::HomeStatus', Ice.Value, -1, (), False, True, None, ())

if 'HomeStatusPrx' not in _M_Home.__dict__:
    _M_Home.HomeStatusPrx = Ice.createTempClass()
    class HomeStatusPrx(Ice.ObjectPrx):

        def getActiveDevices(self, context=None):
            return _M_Home.HomeStatus._op_getActiveDevices.invoke(self, ((), context))

        def getActiveDevicesAsync(self, context=None):
            return _M_Home.HomeStatus._op_getActiveDevices.invokeAsync(self, ((), context))

        def begin_getActiveDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.HomeStatus._op_getActiveDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_getActiveDevices(self, _r):
            return _M_Home.HomeStatus._op_getActiveDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.HomeStatusPrx.ice_checkedCast(proxy, '::Home::HomeStatus', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.HomeStatusPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::HomeStatus'
    _M_Home._t_HomeStatusPrx = IcePy.defineProxy('::Home::HomeStatus', HomeStatusPrx)

    _M_Home.HomeStatusPrx = HomeStatusPrx
    del HomeStatusPrx

    _M_Home.HomeStatus = Ice.createTempClass()
    class HomeStatus(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::HomeStatus', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::HomeStatus'

        @staticmethod
        def ice_staticId():
            return '::Home::HomeStatus'

        def getActiveDevices(self, current=None):
            raise NotImplementedError("servant method 'getActiveDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_HomeStatusDisp)

        __repr__ = __str__

    _M_Home._t_HomeStatusDisp = IcePy.defineClass('::Home::HomeStatus', HomeStatus, (), None, ())
    HomeStatus._ice_type = _M_Home._t_HomeStatusDisp

    HomeStatus._op_getActiveDevices = IcePy.Operation('getActiveDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_ObjectIdentities, False, 0), ())

    _M_Home.HomeStatus = HomeStatus
    del HomeStatus

# End of module Home
